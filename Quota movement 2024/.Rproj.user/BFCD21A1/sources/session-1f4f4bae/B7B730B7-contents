install.packages("ggplot2")
install.packages("ggforce")
install.packages("ambient")  # For Perlin noise (smooth sky swirls)




# Load necessary libraries
library(ggplot2)
library(ggforce)
library(grid)  # This is already installed in base R, just load it


# Define the number of points (sunflower seeds)
n <- 500

# Golden angle in radians
phi <- (3 - sqrt(5)) * pi

# Generate sunflower seed positions using Fibonacci spiral
theta <- (1:n) * phi
r <- sqrt(1:n)

# Convert to Cartesian coordinates
x <- r * cos(theta)
y <- r * sin(theta)

# Create a data frame
sunflower_data <- data.frame(x, y)

# Plot the sunflower pattern
ggplot(sunflower_data, aes(x, y)) +
  geom_point(shape = 21, fill = "yellow", color = "black", size = 4) +  # Seeds
  theme_void() +  # Remove axes
  coord_fixed() +  # Equal aspect ratio
  ggtitle("Sunflower Pattern in R") + 
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16))



# Load required libraries
library(ggplot2)
library(ggforce)
library(grid)

# Function to generate sunflower petals
generate_petals <- function(n_petals = 16, petal_length = 2.5, petal_width = 1) {
  angles <- seq(0, 360, length.out = n_petals + 1)[-1] # Petal angles
  petal_data <- data.frame()
  
  for (angle in angles) {
    petal_data <- rbind(petal_data, data.frame(
      x = c(0, petal_length, petal_length, 0),
      y = c(0, petal_width/2, -petal_width/2, 0),
      group = as.factor(angle),
      angle = angle
    ))
  }
  
  return(petal_data)
}

# Generate sunflower parts
petals <- generate_petals(n_petals = 20, petal_length = 3, petal_width = 1.2)

# Sunflower center
sunflower_center <- data.frame(x = 0, y = 0)

# Stem
stem <- data.frame(x = c(0, 0), y = c(-4, -7))

# Plot sunflower
ggplot() +
  # Draw petals
  geom_polygon(data = petals, aes(x, y, group = group), fill = "yellow", color = "orange", alpha = 0.8) +
  coord_fixed() +
  
  # Rotate petals
  geom_polygon(data = petals, aes(x = cos(angle*pi/180) * x - sin(angle*pi/180) * y,
                                  y = sin(angle*pi/180) * x + cos(angle*pi/180) * y,
                                  group = group),
               fill = "yellow", color = "orange", alpha = 0.8) +
  
  # Draw sunflower center
  geom_point(data = sunflower_center, aes(x, y), size = 12, color = "black", fill = "brown", shape = 21) +
  
  # Draw stem
  geom_line(data = stem, aes(x, y), color = "green", size = 2) +
  
  theme_void() +
  ggtitle("Sunflower in R") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16))






cat(sprintf("%20s", intToUtf8(127803)), "\n")



width <- 20
emoji <- intToUtf8(127803)
spaces <- (width - nchar(emoji)) / 2
cat(strrep(" ", floor(spaces)), emoji, strrep(" ", ceiling(spaces)), "\n")






# Load required libraries
library(ggplot2)
library(ggforce)
library(dplyr)

# Function to generate petals in a Fibonacci spiral
generate_fibonacci_petals <- function(n_petals = 34, petal_length = 3, petal_width = 1.5) {
  golden_angle <- pi * (3 - sqrt(5))  # Approx. 137.5 degrees
  angles <- seq(0, golden_angle * (n_petals - 1), length.out = n_petals)
  
  petals <- data.frame()
  for (i in seq_along(angles)) {
    x_offset <- sqrt(i) * cos(angles[i])
    y_offset <- sqrt(i) * sin(angles[i])
    
    petals <- rbind(petals, data.frame(
      x = c(0, petal_length, petal_length, 0) + x_offset,
      y = c(0, petal_width / 2, -petal_width / 2, 0) + y_offset,
      group = as.factor(i),
      angle = angles[i] * 180 / pi  # Convert to degrees
    ))
  }
  
  return(petals)
}

# Generate sunflower components
petals <- generate_fibonacci_petals(n_petals = 40, petal_length = 3, petal_width = 1.5)

# Sunflower center (seeds)
seed_count <- 200
golden_angle <- pi * (3 - sqrt(5))  # Fibonacci pattern
seeds <- data.frame(
  x = sqrt(1:seed_count) * cos((1:seed_count) * golden_angle) * 1.2,
  y = sqrt(1:seed_count) * sin((1:seed_count) * golden_angle) * 1.2
)

# Sunflower stem (curved)
stem <- data.frame(x = seq(0, 0, length.out = 100),
                   y = seq(-5, -10, length.out = 100) + sin(seq(0, pi, length.out = 100)) * 0.8)

# Sunflower leaves
leaves <- data.frame(
  x = c(-0.8, -1.2, -1.6, -1.2, -0.8, 0.8, 1.2, 1.6, 1.2, 0.8),
  y = c(-7.5, -8.5, -9.5, -10, -9, -7.5, -8.5, -9.5, -10, -9)
)

# Plot sunflower
ggplot() +
  # Draw petals
  geom_polygon(data = petals, aes(x, y, group = group), fill = "gold", color = "orange", alpha = 0.9) +
  
  # Draw sunflower center (seeds)
  geom_point(data = seeds, aes(x, y), color = "brown", size = 2) +
  
  # Draw stem
  geom_line(data = stem, aes(x, y), color = "green", size = 3) +
  
  # Draw leaves
  geom_polygon(data = leaves, aes(x, y), fill = "darkgreen", color = "black") +
  
  coord_fixed() +
  theme_void() +
  ggtitle("Realistic Sunflower in R") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 18))












# Load required libraries
library(ggplot2)
library(ggforce)
library(dplyr)

# Function to generate Fibonacci-spiral petals
generate_fibonacci_petals <- function(n_petals = 50, petal_length = 3, petal_width = 1.2) {
  golden_angle <- pi * (3 - sqrt(5))  # Approx. 137.5 degrees
  angles <- seq(0, golden_angle * (n_petals - 1), length.out = n_petals)
  
  petals <- data.frame()
  for (i in seq_along(angles)) {
    x_offset <- sqrt(i) * cos(angles[i]) * 1.2
    y_offset <- sqrt(i) * sin(angles[i]) * 1.2
    
    petals <- rbind(petals, data.frame(
      x0 = x_offset, y0 = y_offset,  # Center of each petal
      a = petal_length, b = petal_width,
      angle = angles[i] * 180 / pi  # Convert to degrees
    ))
  }
  
  return(petals)
}

# Generate sunflower components
petals <- generate_fibonacci_petals(n_petals = 60, petal_length = 3, petal_width = 1.4)

# Sunflower center (Fibonacci seed pattern)
seed_count <- 400
golden_angle <- pi * (3 - sqrt(5))
seeds <- data.frame(
  x = sqrt(1:seed_count) * cos((1:seed_count) * golden_angle) * 1.1,
  y = sqrt(1:seed_count) * sin((1:seed_count) * golden_angle) * 1.1
)

# Sunflower stem (curved Bezier)
stem <- data.frame(x = c(0, -0.5, -0.3, 0.2, 0.3),
                   y = c(-4, -6, -7, -9, -11))

# Sunflower leaves (Bezier curve)
leaf1 <- data.frame(x = c(0.3, 1.5, 2, 1), y = c(-6, -7, -8.5, -8))
leaf2 <- data.frame(x = c(-0.3, -1.5, -2, -1), y = c(-6, -7, -8.5, -8))

# Plot sunflower
ggplot() +
  # Draw petals using ellipses
  geom_ellipse(data = petals, aes(x0 = x0, y0 = y0, a = a, b = b, angle = angle),
               fill = "gold", color = "orange", alpha = 0.9) +
  
  # Draw sunflower center (seeds)
  geom_point(data = seeds, aes(x, y), color = "brown", size = 1.5) +
  
  # Draw stem (Bezier curve for realism)
  geom_bezier(data = stem, aes(x, y), color = "green", size = 3) +
  
  # Draw leaves
  geom_bezier(data = leaf1, aes(x, y), fill = "darkgreen", color = "black") +
  geom_bezier(data = leaf2, aes(x, y), fill = "darkgreen", color = "black") +
  
  coord_fixed() +
  theme_void() +
  ggtitle("Highly Realistic Sunflower in R") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 18))









# Load required libraries
library(ggplot2)
library(ggforce)
library(dplyr)

set.seed(123)  # Ensure reproducibility

# Generate swirling sky pattern (using sine waves)
swirl_x <- seq(-10, 10, length.out = 200)
swirl_y <- sin(swirl_x * 1.5) + cos(swirl_x * 2.5) + rnorm(200, 0, 0.3)
swirls <- data.frame(x = swirl_x, y = swirl_y * 2 + 8)  # Adjust height

# Generate stars (randomized positions & sizes)
n_stars <- 100
stars <- data.frame(
  x = runif(n_stars, -10, 10),
  y = runif(n_stars, 5, 12),
  size = runif(n_stars, 2, 5)
)

# Generate moon
moon <- data.frame(x = 6, y = 10, size = 8)

# Generate hills
hills <- data.frame(x = c(-10, -7, -5, -3, 0, 3, 5, 7, 10),
                    y = c(-2, -1, -2, 0, -1, 0, -2, -1, -2))

# Generate cypress tree (tall, curved)
cypress <- data.frame(
  x = c(-5, -5.2, -5.5, -5.6, -5.7, -5.6, -5.5, -5.2, -5),
  y = c(-3, 0, 2, 4, 6, 8, 10, 12, 15)
)

# Generate village (simple rectangles for houses)
village <- data.frame(
  x = c(-2, -1, 0, 1, 2),
  y = c(-3, -3.5, -3.8, -3.2, -3.6),
  width = c(1, 1.2, 1.5, 1, 1.3),
  height = c(1, 1.2, 1.5, 1.2, 1)
)

# Plot Starry Night
ggplot() +
  # Swirling sky
  geom_path(data = swirls, aes(x, y), color = "lightblue", size = 2, alpha = 0.6) +
  
  # Stars
  geom_point(data = stars, aes(x, y, size = size), color = "yellow", alpha = 0.8) +
  
  # Moon
  geom_point(data = moon, aes(x, y, size = size), color = "gold", alpha = 0.9) +
  
  # Hills
  geom_polygon(data = hills, aes(x, y), fill = "darkblue", color = "black") +
  
  # Cypress tree
  geom_path(data = cypress, aes(x, y), color = "darkgreen", size = 5) +
  
  # Village houses
  geom_rect(data = village, aes(xmin = x - width/2, xmax = x + width/2, 
                                ymin = y, ymax = y + height), fill = "brown", color = "black") +
  
  coord_fixed() +
  theme_void() +
  ggtitle("Starry Night in  R programming by Salek") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20))












# Load required libraries
library(ggplot2)
library(ambient)   # For Perlin noise (smooth swirling sky)
library(dplyr)
library(ggforce)

set.seed(42)

# Generate swirling sky using Perlin noise
sky_grid <- expand.grid(x = seq(-10, 10, length.out = 200), y = seq(5, 12, length.out = 100))
sky_grid$noise <- gen_perlin(sky_grid$x, sky_grid$y, frequency = 0.5)

# Generate stars with glowing effect
n_stars <- 120
stars <- data.frame(
  x = runif(n_stars, -10, 10),
  y = runif(n_stars, 6, 12),
  size = runif(n_stars, 2, 5),
  alpha = runif(n_stars, 0.6, 0.9)
)

# Generate a bright moon
moon <- data.frame(x = 6, y = 10, size = 8)

# Hills silhouette
hills <- data.frame(
  x = c(-10, -7, -5, -3, 0, 3, 5, 7, 10),
  y = c(-3, -1, -2, -1, -2, -1, -2, -1, -3)
)

# Cypress tree with a curved shape
cypress <- data.frame(
  x = c(-5, -5.3, -5.6, -5.8, -6, -5.8, -5.6, -5.3, -5),
  y = c(-3, 0, 2, 4, 6, 8, 10, 12, 15)
)

# Village houses
village <- data.frame(
  x = c(-2, -1, 0, 1, 2),
  y = c(-3, -3.5, -3.8, -3.2, -3.6),
  width = c(1, 1.2, 1.5, 1, 1.3),
  height = c(1, 1.2, 1.5, 1.2, 1)
)

# Plot Starry Night
ggplot() +
  # Sky swirls using Perlin noise
  geom_tile(data = sky_grid, aes(x, y, fill = noise)) +
  scale_fill_gradient(low = "navy", high = "lightblue") +
  
  # Stars
  geom_point(data = stars, aes(x, y, size = size, alpha = alpha), color = "yellow") +
  
  # Moon with glow effect
  geom_point(data = moon, aes(x, y, size = size), color = "gold", alpha = 0.9) +
  
  # Hills in the background
  geom_polygon(data = hills, aes(x, y), fill = "black", color = "darkblue") +
  
  # Cypress tree silhouette
  geom_path(data = cypress, aes(x, y), color = "darkgreen", size = 5) +
  
  # Village houses
  geom_rect(data = village, aes(xmin = x - width/2, xmax = x + width/2, ymin = y, ymax = y + height), fill = "brown", color = "black") +
  
  coord_fixed() +
  theme_void() +
  ggtitle(" Starry Night in R programming by Salek") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20))







































